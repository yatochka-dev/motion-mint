// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: workout.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const createWorkoutForUser = `-- name: CreateWorkoutForUser :one
INSERT INTO workout (user_id)
VALUES ($1)
    RETURNING id, user_id, started_at, ended_at
`

func (q *Queries) CreateWorkoutForUser(ctx context.Context, userID uuid.UUID) (Workout, error) {
	row := q.db.QueryRow(ctx, createWorkoutForUser, userID)
	var i Workout
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.StartedAt,
		&i.EndedAt,
	)
	return i, err
}

const finishWorkout = `-- name: FinishWorkout :exec
UPDATE workout
SET ended_at = now()
WHERE id = $1
  AND ended_at IS NULL
`

func (q *Queries) FinishWorkout(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, finishWorkout, id)
	return err
}

const getWorkout = `-- name: GetWorkout :one

SELECT id, user_id, started_at, ended_at FROM workout
WHERE id = $1
`

// idempotent (even if I call like 20 times, changes only once)
func (q *Queries) GetWorkout(ctx context.Context, id uuid.UUID) (Workout, error) {
	row := q.db.QueryRow(ctx, getWorkout, id)
	var i Workout
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.StartedAt,
		&i.EndedAt,
	)
	return i, err
}

const listWorkoutsByUser = `-- name: ListWorkoutsByUser :many
SELECT id, user_id, started_at, ended_at
FROM workout
WHERE user_id = $1
ORDER BY started_at DESC
    LIMIT $2 OFFSET $3
`

type ListWorkoutsByUserParams struct {
	UserID uuid.UUID `json:"user_id"`
	Limit  int32     `json:"limit"`
	Offset int32     `json:"offset"`
}

func (q *Queries) ListWorkoutsByUser(ctx context.Context, arg ListWorkoutsByUserParams) ([]Workout, error) {
	rows, err := q.db.Query(ctx, listWorkoutsByUser, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Workout
	for rows.Next() {
		var i Workout
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.StartedAt,
			&i.EndedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
