// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package repository

import (
	"database/sql/driver"
	"fmt"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type WorkoutSetStatus string

const (
	WorkoutSetStatusACTIVE  WorkoutSetStatus = "ACTIVE"
	WorkoutSetStatusDONE    WorkoutSetStatus = "DONE"
	WorkoutSetStatusABORTED WorkoutSetStatus = "ABORTED"
)

func (e *WorkoutSetStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = WorkoutSetStatus(s)
	case string:
		*e = WorkoutSetStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for WorkoutSetStatus: %T", src)
	}
	return nil
}

type NullWorkoutSetStatus struct {
	WorkoutSetStatus WorkoutSetStatus `json:"workout_set_status"`
	Valid            bool             `json:"valid"` // Valid is true if WorkoutSetStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullWorkoutSetStatus) Scan(value interface{}) error {
	if value == nil {
		ns.WorkoutSetStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.WorkoutSetStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullWorkoutSetStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.WorkoutSetStatus), nil
}

type AppUser struct {
	ID           uuid.UUID          `json:"id"`
	Name         string             `json:"name"`
	Email        string             `json:"email"`
	PasswordHash string             `json:"password_hash"`
	CreatedAt    pgtype.Timestamptz `json:"created_at"`
}

type Exercise struct {
	ID   int16  `json:"id"`
	Name string `json:"name"`
}

type Rep struct {
	ID           uuid.UUID          `json:"id"`
	WorkoutSetID uuid.UUID          `json:"workout_set_id"`
	RepIndex     int16              `json:"rep_index"`
	QualityScore pgtype.Numeric     `json:"quality_score"`
	DoneAt       pgtype.Timestamptz `json:"done_at"`
}

type Workout struct {
	ID        uuid.UUID          `json:"id"`
	UserID    uuid.UUID          `json:"user_id"`
	StartedAt pgtype.Timestamptz `json:"started_at"`
	EndedAt   pgtype.Timestamptz `json:"ended_at"`
}

type WorkoutSet struct {
	ID         uuid.UUID          `json:"id"`
	WorkoutID  uuid.UUID          `json:"workout_id"`
	ExerciseID int16              `json:"exercise_id"`
	CxxPod     pgtype.Text        `json:"cxx_pod"`
	ExpiresAt  pgtype.Timestamptz `json:"expires_at"`
	StartedAt  pgtype.Timestamptz `json:"started_at"`
	EndedAt    pgtype.Timestamptz `json:"ended_at"`
	Status     WorkoutSetStatus   `json:"status"`
}
