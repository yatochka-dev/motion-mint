// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: rep.sql

package repository

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const getMaxRepIndex = `-- name: GetMaxRepIndex :one
SELECT COALESCE(MAX(rep_index), 0) AS max_idx
FROM rep
WHERE workout_set_id = $1
`

func (q *Queries) GetMaxRepIndex(ctx context.Context, workoutSetID uuid.UUID) (interface{}, error) {
	row := q.db.QueryRow(ctx, getMaxRepIndex, workoutSetID)
	var max_idx interface{}
	err := row.Scan(&max_idx)
	return max_idx, err
}

const insertRep = `-- name: InsertRep :one
INSERT INTO rep (
    workout_set_id, rep_index, quality_score
) VALUES (
             $1, $2, $3
         ) RETURNING id, workout_set_id, rep_index, quality_score, done_at
`

type InsertRepParams struct {
	WorkoutSetID uuid.UUID      `json:"workout_set_id"`
	RepIndex     int16          `json:"rep_index"`
	QualityScore pgtype.Numeric `json:"quality_score"`
}

func (q *Queries) InsertRep(ctx context.Context, arg InsertRepParams) (Rep, error) {
	row := q.db.QueryRow(ctx, insertRep, arg.WorkoutSetID, arg.RepIndex, arg.QualityScore)
	var i Rep
	err := row.Scan(
		&i.ID,
		&i.WorkoutSetID,
		&i.RepIndex,
		&i.QualityScore,
		&i.DoneAt,
	)
	return i, err
}

const listRepsForSet = `-- name: ListRepsForSet :many
SELECT id, workout_set_id, rep_index, quality_score, done_at
FROM rep
WHERE workout_set_id = $1
ORDER BY rep_index
`

func (q *Queries) ListRepsForSet(ctx context.Context, workoutSetID uuid.UUID) ([]Rep, error) {
	rows, err := q.db.Query(ctx, listRepsForSet, workoutSetID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Rep
	for rows.Next() {
		var i Rep
		if err := rows.Scan(
			&i.ID,
			&i.WorkoutSetID,
			&i.RepIndex,
			&i.QualityScore,
			&i.DoneAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
