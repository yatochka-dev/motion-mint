// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: workout_set.sql

package repository

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createWorkoutSet = `-- name: CreateWorkoutSet :one
INSERT INTO workout_set (
    workout_id, exercise_id, cxx_pod, expires_at, started_at
) VALUES (
             $1, $2, $3, $4, $5
         ) RETURNING id, workout_id, exercise_id, cxx_pod, expires_at, started_at, ended_at, status
`

type CreateWorkoutSetParams struct {
	WorkoutID  uuid.UUID          `json:"workout_id"`
	ExerciseID int16              `json:"exercise_id"`
	CxxPod     pgtype.Text        `json:"cxx_pod"`
	ExpiresAt  pgtype.Timestamptz `json:"expires_at"`
	StartedAt  pgtype.Timestamptz `json:"started_at"`
}

func (q *Queries) CreateWorkoutSet(ctx context.Context, arg CreateWorkoutSetParams) (WorkoutSet, error) {
	row := q.db.QueryRow(ctx, createWorkoutSet,
		arg.WorkoutID,
		arg.ExerciseID,
		arg.CxxPod,
		arg.ExpiresAt,
		arg.StartedAt,
	)
	var i WorkoutSet
	err := row.Scan(
		&i.ID,
		&i.WorkoutID,
		&i.ExerciseID,
		&i.CxxPod,
		&i.ExpiresAt,
		&i.StartedAt,
		&i.EndedAt,
		&i.Status,
	)
	return i, err
}

const getActiveSetByWorkout = `-- name: GetActiveSetByWorkout :one
SELECT id, workout_id, exercise_id, cxx_pod, expires_at, started_at, ended_at, status
FROM workout_set
WHERE workout_id = $1
  AND status = 'ACTIVE'                   -- active
    LIMIT 1
`

func (q *Queries) GetActiveSetByWorkout(ctx context.Context, workoutID uuid.UUID) (WorkoutSet, error) {
	row := q.db.QueryRow(ctx, getActiveSetByWorkout, workoutID)
	var i WorkoutSet
	err := row.Scan(
		&i.ID,
		&i.WorkoutID,
		&i.ExerciseID,
		&i.CxxPod,
		&i.ExpiresAt,
		&i.StartedAt,
		&i.EndedAt,
		&i.Status,
	)
	return i, err
}

const listSetsByWorkout = `-- name: ListSetsByWorkout :many
SELECT id, workout_id, exercise_id, cxx_pod, expires_at, started_at, ended_at, status
FROM workout_set
WHERE workout_id = $1
ORDER BY started_at
`

func (q *Queries) ListSetsByWorkout(ctx context.Context, workoutID uuid.UUID) ([]WorkoutSet, error) {
	rows, err := q.db.Query(ctx, listSetsByWorkout, workoutID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []WorkoutSet
	for rows.Next() {
		var i WorkoutSet
		if err := rows.Scan(
			&i.ID,
			&i.WorkoutID,
			&i.ExerciseID,
			&i.CxxPod,
			&i.ExpiresAt,
			&i.StartedAt,
			&i.EndedAt,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateWorkoutSetStatus = `-- name: UpdateWorkoutSetStatus :exec
UPDATE workout_set
SET   status     = $2,
      ended_at   = CASE WHEN $2 IN (1,2) THEN now() ELSE ended_at END
WHERE id = $1
`

type UpdateWorkoutSetStatusParams struct {
	ID     uuid.UUID        `json:"id"`
	Status WorkoutSetStatus `json:"status"`
}

func (q *Queries) UpdateWorkoutSetStatus(ctx context.Context, arg UpdateWorkoutSetStatusParams) error {
	_, err := q.db.Exec(ctx, updateWorkoutSetStatus, arg.ID, arg.Status)
	return err
}
