// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: app_user.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO app_user (email)
VALUES ($1) RETURNING id, email, created_at
`

func (q *Queries) CreateUser(ctx context.Context, email string) (AppUser, error) {
	row := q.db.QueryRow(ctx, createUser, email)
	var i AppUser
	err := row.Scan(&i.ID, &i.Email, &i.CreatedAt)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, created_at FROM app_user
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (AppUser, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i AppUser
	err := row.Scan(&i.ID, &i.Email, &i.CreatedAt)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one

SELECT id, email, created_at FROM app_user
WHERE id = $1 LIMIT 1
`

// id, email, created_at
func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (AppUser, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i AppUser
	err := row.Scan(&i.ID, &i.Email, &i.CreatedAt)
	return i, err
}
