// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: refresh_token.sql

package repository

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createRefreshToken = `-- name: CreateRefreshToken :exec
INSERT INTO refresh_token (
    token, user_id, expires_at, user_agent
) VALUES ($1, $2, $3, $4)
`

type CreateRefreshTokenParams struct {
	Token     string             `json:"token"`
	UserID    uuid.UUID          `json:"user_id"`
	ExpiresAt pgtype.Timestamptz `json:"expires_at"`
	UserAgent pgtype.Text        `json:"user_agent"`
}

func (q *Queries) CreateRefreshToken(ctx context.Context, arg CreateRefreshTokenParams) error {
	_, err := q.db.Exec(ctx, createRefreshToken,
		arg.Token,
		arg.UserID,
		arg.ExpiresAt,
		arg.UserAgent,
	)
	return err
}

const deleteRefreshToken = `-- name: DeleteRefreshToken :exec
DELETE FROM refresh_token
WHERE token = $1
`

func (q *Queries) DeleteRefreshToken(ctx context.Context, token string) error {
	_, err := q.db.Exec(ctx, deleteRefreshToken, token)
	return err
}

const getRefreshToken = `-- name: GetRefreshToken :one
SELECT token, user_id, issued_at, expires_at, user_agent
FROM refresh_token
WHERE token = $1
  AND expires_at > now()
`

func (q *Queries) GetRefreshToken(ctx context.Context, token string) (RefreshToken, error) {
	row := q.db.QueryRow(ctx, getRefreshToken, token)
	var i RefreshToken
	err := row.Scan(
		&i.Token,
		&i.UserID,
		&i.IssuedAt,
		&i.ExpiresAt,
		&i.UserAgent,
	)
	return i, err
}
